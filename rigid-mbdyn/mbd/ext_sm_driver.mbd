# $Header: /var/cvs/mbdyn/mbdyn/mbdyn-1.0/tests/forces/strext/socket/springmass/springmass,v 1.8 2016/10/18 19:28:17 masarati Exp $
#
# MBDyn (C) is a multibody analysis code.
# http://www.mbdyn.org
#
# Copyright (C) 1996-2015
#
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
#
# Dipartimento di Ingegneria Aerospaziale - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
#
# Changing this copyright notice is forbidden.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
#
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Author: Pierangelo Masarati <masarati@aero.polimi.it>

begin: data;
	problem: initial value;
end: data;

begin: initial value;
	set: real DT = 5e-3;
	set: real INITIAL_TIME = 0.0;
	set: real FINAL_TIME = 5.0;

	initial time: INITIAL_TIME;
	final time: FINAL_TIME;
	time step: DT;
	set: const integer TIMESTEP = 1234;
	strategy: change, postponed, TIMESTEP; # changes the time step as specified by the drive caller labeled TIMESTEP, whose definition is postponed (this is simply a placeholder)

	method: ms, .6;
	linear solver: naive, colamd;
	nonlinear solver: newton raphson, modified, 5;

	tolerance: 1e-6;
	max iterations: 1000;

	derivatives coefficient: 1e-9;
	derivatives tolerance: 1e-6;
	derivatives max iterations: 100;

	output: iterations;
	output: residual;
end: initial value;

begin: control data;
	max iterations: 1000;
	structural nodes:
		+1		# ground
		+1		# mass 1
	;
	rigid bodies:
		+1		# mass 1
	;
	joints:
		+1		# ground clamp
		+1		# spring for mass 1
	;
	forces:
		+1		# external force for mass 1
	;
	file drivers:
		+1
	;
end: control data;

set: const integer GROUND = 0;
set: const integer MASS_1 = 1;

set: const real Y0 = 0.0;
set: const real K = 1000*(2*pi)^2;
set: const real C = 10.0;


reference: GROUND,
	reference, global, 0., Y0, 0.,
	reference, global, eye,
	reference, global, null,
	reference, global, null;

reference: MASS_1,
	reference, global, null,
	reference, global, eye,
	reference, global, null,
	reference, global, null;

begin: nodes;
	structural: GROUND, static,
		reference, GROUND, null,
		reference, GROUND, eye,
		reference, GROUND, null,
		reference, GROUND, null,
		output, no;

	structural: MASS_1, dynamic,
		reference, MASS_1, null,   	# position
		reference, MASS_1, eye,			# orientation
		reference, MASS_1, null,		# velocity
		reference, MASS_1, null;		# angular velocity

end: nodes;

begin: drivers;
	set: const integer INPUT = 200;
	file: INPUT, stream,
		  stream drive name, "TS_DRV", # irrelevant but needed
		  create, yes,
		  path, "./mbdyn.ts.sock", # or use port
		  1;      # one channel: the time step
	  drive caller: TIMESTEP, file, INPUT, 1; # replace placeholder with file driver
end: drivers;

begin: elements;
	joint: GROUND, clamp, GROUND, node, node;

	joint: MASS_1, deformable displacement joint,
		GROUND,
			position, reference, GROUND, null,
			orientation, reference, GROUND, eye,
		MASS_1,
			position, reference, MASS_1, null,
			orientation, reference, MASS_1, eye,
		linear viscoelastic isotropic, K, C,
		prestress, 0., 0., 0.;

	body: MASS_1, MASS_1,
		20.,
		null,
		diag, 1., 1., 1.;

	force: MASS_1, external structural,
		socket,
		create, yes,
		path, "./mbdyn.node.sock",
		no signal,
		coupling,
			# loose,
			tight,
		orientation, orientation vector,
		accelerations, yes,
		# orientation, orientation matrix, # default
		# orientation, euler 123,
		1,
			MASS_1;
end: elements;

# vim:ft=mbd
